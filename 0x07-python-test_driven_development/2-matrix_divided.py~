#!/usr/bin/python3
"""Create a function that performs matrix division."""


def matrix_divided(matrix, div):
    """Implement a function to divide each element of
    a matrix.

    ARGS:
      matrix (list): A list of lists containing integers or floats.
      div (int/float): The divisor.
    Raises:
      TypeError: If the matrix contains non-numeric values.
      TypeError: If the matrix has rows of varying lengths.
      TypeError: If the divisor is not an integer or float.
      ZeroDivisionError: If the divisor is 0.
    Returns:
      A new matrix representing the outcome of the division.
    """
    if (not isinstance(matrix, list) or matrix == [] or
        not all(isinstance(row, list) for row in matrix) or
        not all((isinstance(ele, int) or isinstance(ele, float))
                for ele in [num for row in matrix for num in row])):
        raise TypeError("matrix must be a matrix (list of lists) of "
                        "integers/floats")
    if not all(len(row) == len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")
    if not isinstance(div, int) and not isinstance(div, float):
        raise TypeError("div must be a number")
    if div == 0:
        raise ZeroDivisionError("Division by zero")
    return ([list(map(lambda x: round(x / div, 2), row)) for row in matrix])
